!function(){"use strict";var config={apiKey:"AIzaSyC_3OldnzSB0qGsdXCl3rHPucEeU7Pk5xw",authDomain:"adminshmot.firebaseapp.com",databaseURL:"https://adminshmot.firebaseio.com",storageBucket:"adminshmot.appspot.com",messagingSenderId:"551544753681"};firebase.initializeApp(config)}(),function(){"use strict";angular.module("shmotAdmin",["ngCookies","ngMaterial","ngMessages","ui.router","ngAnimate","firebase"])}(),function(){"use strict";function config($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state({name:"main",abstract:!0,templateUrl:"views/main.html"}),$stateProvider.state({name:"login",url:"/login",template:"<login></login>",data:{freeAssent:!0}}),$stateProvider.state({name:"register",url:"/register",template:"<register></register>",data:{freeAssent:!0}}),$stateProvider.state({name:"main.home",url:"/",templateUrl:"views/pages/home.html"}),$stateProvider.state({name:"main.finance",url:"/finance",templateUrl:"views/pages/finance.html"})}angular.module("shmotAdmin").config(config)}(),function(){"use strict";function runFunction($rootScope,$state,Auth){function checkAuth(event,toState,toParams,fromState,fromParams,options){void 0!==toState.data&&toState.data.freeAssent||Auth.$onAuthStateChanged(function(user){user||$state.go("login")})}$rootScope.user=null,$rootScope.$on("$stateChangeStart",checkAuth)}angular.module("shmotAdmin").run(runFunction)}(),function(){"use strict";function LoginController($state,Auth){function auth(){Auth.$signInWithEmailAndPassword(vm.email,vm.password).then(function(firebaseUser){vm.message="User created with uid: "+firebaseUser.uid,$state.go("main")}).catch(function(error){vm.error=error})}var vm=this;vm.auth=auth}angular.module("shmotAdmin").component("login",{templateUrl:"views/components/singin.html",controller:LoginController,controllerAs:"vm"})}(),function(){"use strict";function LoginController(Auth){function register(){Auth.$createUserWithEmailAndPassword(vm.email,vm.password).then(function(firebaseUser){vm.message="User created with uid: "+firebaseUser.uid}).catch(function(error){vm.error=error})}var vm=this;vm.register=register}angular.module("shmotAdmin").component("register",{templateUrl:"views/components/singup.html",controller:LoginController,controllerAs:"vm"})}(),function(){"use strict";function TransactionController(Finance){console.log(Finance.getTransactionsList())}angular.module("shmotAdmin").component("transaction",{templateUrl:"views/components/transaction.html",controller:TransactionController,controllerAs:"vm"})}(),function(){"use strict";function Auth($firebaseAuth){return $firebaseAuth()}angular.module("shmotAdmin").factory("Auth",Auth)}(),function(){"use strict";function Finance($http,$firebaseObject){function getPbKey(){pbKey=$firebaseObject(ref).pbKey}function loadingTransactionsList(){$http({method:"GET",url:"https://api.privatbank.ua/p24api/rest_fiz",data:'<?xml version="1.0" encoding="UTF-8"?><request version="1.0"><merchant><id>75482</id><signature>5abf5c7524bc2a835acb3a9e24ce10bc5ba82a99</signature></merchant><data><oper>cmt</oper><wait>0</wait><test>0</test><payment id=""><prop name="sd" value="11.08.2013" /><prop name="ed" value="11.09.2013" /><prop name="card" value="5168742060221193" /></payment></data></request>'}).then(function(response){console.log(response)},function(response){console.log(response)})}function getTransactionsList(){return transactions}var vm=this,ref=firebase.database().ref(),pbKey=null,transactions={items:[{name:"dsd"}]};return vm.getTransactionsList=getTransactionsList,getPbKey(),loadingTransactionsList(),vm}angular.module("shmotAdmin").factory("Finance",Finance)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
